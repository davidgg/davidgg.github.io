// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$github-name: 'github';
$github-x: 100px;
$github-y: 200px;
$github-offset-x: -100px;
$github-offset-y: -200px;
$github-width: 40px;
$github-height: 40px;
$github-total-width: 302px;
$github-total-height: 300px;
$github-image: '/assets/img/sprite.png';
$github: (100px, 200px, -100px, -200px, 40px, 40px, 302px, 300px, '/assets/img/sprite.png', 'github', );
$instagram-name: 'instagram';
$instagram-x: 140px;
$instagram-y: 200px;
$instagram-offset-x: -140px;
$instagram-offset-y: -200px;
$instagram-width: 40px;
$instagram-height: 40px;
$instagram-total-width: 302px;
$instagram-total-height: 300px;
$instagram-image: '/assets/img/sprite.png';
$instagram: (140px, 200px, -140px, -200px, 40px, 40px, 302px, 300px, '/assets/img/sprite.png', 'instagram', );
$me-name: 'me';
$me-x: 0px;
$me-y: 0px;
$me-offset-x: 0px;
$me-offset-y: 0px;
$me-width: 202px;
$me-height: 200px;
$me-total-width: 302px;
$me-total-height: 300px;
$me-image: '/assets/img/sprite.png';
$me: (0px, 0px, 0px, 0px, 202px, 200px, 302px, 300px, '/assets/img/sprite.png', 'me', );
$meetpays-name: 'meetpays';
$meetpays-x: 202px;
$meetpays-y: 0px;
$meetpays-offset-x: -202px;
$meetpays-offset-y: 0px;
$meetpays-width: 100px;
$meetpays-height: 100px;
$meetpays-total-width: 302px;
$meetpays-total-height: 300px;
$meetpays-image: '/assets/img/sprite.png';
$meetpays: (202px, 0px, -202px, 0px, 100px, 100px, 302px, 300px, '/assets/img/sprite.png', 'meetpays', );
$sngular-name: 'sngular';
$sngular-x: 202px;
$sngular-y: 100px;
$sngular-offset-x: -202px;
$sngular-offset-y: -100px;
$sngular-width: 100px;
$sngular-height: 100px;
$sngular-total-width: 302px;
$sngular-total-height: 300px;
$sngular-image: '/assets/img/sprite.png';
$sngular: (202px, 100px, -202px, -100px, 100px, 100px, 302px, 300px, '/assets/img/sprite.png', 'sngular', );
$sweetspot-name: 'sweetspot';
$sweetspot-x: 0px;
$sweetspot-y: 200px;
$sweetspot-offset-x: 0px;
$sweetspot-offset-y: -200px;
$sweetspot-width: 100px;
$sweetspot-height: 100px;
$sweetspot-total-width: 302px;
$sweetspot-total-height: 300px;
$sweetspot-image: '/assets/img/sprite.png';
$sweetspot: (0px, 200px, 0px, -200px, 100px, 100px, 302px, 300px, '/assets/img/sprite.png', 'sweetspot', );
$twitter-name: 'twitter';
$twitter-x: 180px;
$twitter-y: 200px;
$twitter-offset-x: -180px;
$twitter-offset-y: -200px;
$twitter-width: 40px;
$twitter-height: 40px;
$twitter-total-width: 302px;
$twitter-total-height: 300px;
$twitter-image: '/assets/img/sprite.png';
$twitter: (180px, 200px, -180px, -200px, 40px, 40px, 302px, 300px, '/assets/img/sprite.png', 'twitter', );
$spritesheet-width: 302px;
$spritesheet-height: 300px;
$spritesheet-image: '/assets/img/sprite.png';
$spritesheet-sprites: ($github, $instagram, $me, $meetpays, $sngular, $sweetspot, $twitter, );
$spritesheet: (302px, 300px, '/assets/img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
